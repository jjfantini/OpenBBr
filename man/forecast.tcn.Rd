% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions.R
\name{forecast.tcn}
\alias{forecast.tcn}
\title{Perform TCN forecasting}
\usage{
forecast.tcn(
  data,
  target_column = "close",
  n_predict = 5,
  past_covariates,
  train_split = 0.85,
  forecast_horizon = 5,
  input_chunk_length = 14,
  output_chunk_length = 5,
  dropout = 0.1,
  num_filters = 3,
  weight_norm = TRUE,
  dilation_base = 2,
  n_epochs = 300,
  learning_rate = 0.001,
  batch_size = 32,
  model_save_name = "tcn_model",
  force_reset = TRUE,
  save_checkpoints = TRUE,
  metric = "mape"
)
}
\arguments{
\item{target_column}{(character length 1) Target column to forecast. Defaults to "close".}

\item{n_predict}{(integer length 1) Days to predict. Defaults to 5.}

\item{train_split}{(numeric length 1) Train/val split. Defaults to 0.85.}

\item{forecast_horizon}{(integer length 1) Forecast horizon when performing historical forecasting. Defaults to 5.}

\item{input_chunk_length}{(integer length 1) Number of past time steps that are fed to the forecasting module at prediction time. Defaults to 14.}

\item{output_chunk_length}{(integer length 1) The length of the forecast of the model. Defaults to 5.}

\item{dropout}{(numeric length 1) Fraction of neurons affected by Dropout. Defaults to 0.1.}

\item{num_filters}{(integer length 1) The number of filters in a convolutional layer of the TCN. Defaults to 6.}

\item{weight_norm}{(logical length 1) Boolean value indicating whether to use weight normalization. Defaults to True.}

\item{dilation_base}{(integer length 1) The base of the exponent that will determine the dilation on every level. Defaults to 2.}

\item{n_epochs}{(integer length 1) Number of epochs over which to train the model. Defaults to 100.}

\item{learning_rate}{(numeric length 1) Defaults to 1e-3.}

\item{batch_size}{(integer length 1) Number of time series (input and output sequences) used in each training pass. Defaults to 32.}

\item{model_save_name}{(character length 1) Name for model. Defaults to "brnn_model".}

\item{force_reset}{(logical length 1) If set to True, any previously-existing model with the same name will be reset
(all checkpoints will be discarded). Defaults to True.}

\item{save_checkpoints}{(logical length 1) Whether or not to automatically save the untrained model and checkpoints from training.
Defaults to True.}

\item{metric}{(character length 1) Metric to use for model selection. Defaults to "mape".}
}
\description{
Wrapper for Python function forecast.tcn from OpenBB Terminal SDK
}
\examples{
forecast.tcn(target_column='close', n_predict=5, train_split=0.85, forecast_horizon=5, input_chunk_length=14, output_chunk_length=5, dropout=0.1, num_filters=6, weight_norm=TRUE, dilation_base=2, batch_size=800, n_epochs=100, learning_rate=0.001, model_save_name='tcn_model', force_reset=TRUE, save_checkpoints=TRUE)
}
